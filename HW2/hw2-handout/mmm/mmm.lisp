(defun helper (lst)
  (cond
    ((null (cdr lst))
     (list (car lst) (car lst) (car lst) 1))
    (t
     (let* ((x    (car lst))
            (rest (helper (cdr lst)))
            (min   (car rest))
            (max   (car (cdr rest)))
            (sum   (car (cdr (cdr rest))))
            (count   (car (cdr (cdr (cdr rest))))))
       (list (if (< x min) x min)
             (if (> x max) x max)
             (+ x sum)
             (+ count 1))))))

(defun min-mean-max (xs)
  (let* ((res  (helper xs))
         (min   (car res))
         (max   (car (cdr res)))
         (sum   (car (cdr (cdr res))))
         (count   (car (cdr (cdr (cdr res)))))
         (mean (/ sum count)))
    (list min mean max)))
